
'use server';
/**
 * @fileOverview A Genkit flow for generating text based on a user prompt.
 *
 * - generateText - A function that calls the AI to generate text.
 * - GenerateTextInput - The input type for the generateText function.
 * - GenerateTextOutput - The return type for the generateText function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTextInputSchema = z.object({
  prompt: z.string().describe("The user's prompt for text generation."),
});
export type GenerateTextInput = z.infer<typeof GenerateTextInputSchema>;

const GenerateTextOutputSchema = z.object({
  generatedText: z.string().describe('The text generated by the AI.'),
});
export type GenerateTextOutput = z.infer<typeof GenerateTextOutputSchema>;

export async function generateText(input: GenerateTextInput): Promise<GenerateTextOutput> {
  return generateTextFlow(input);
}

const generationPrompt = ai.definePrompt({
  name: 'generateTextPrompt',
  input: {schema: GenerateTextInputSchema},
  output: {schema: GenerateTextOutputSchema},
  prompt: `You are a helpful AI assistant. Your task is to generate text based on the user's prompt.
Be creative and informative.

User Prompt:
{{{prompt}}}

Generated Text:
`,
});

const generateTextFlow = ai.defineFlow(
  {
    name: 'generateTextFlow',
    inputSchema: GenerateTextInputSchema,
    outputSchema: GenerateTextOutputSchema,
  },
  async (input) => {
    const {output} = await generationPrompt(input);
    if (!output) {
      throw new Error('AI did not return an output.');
    }
    return output;
  }
);
